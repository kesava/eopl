#reader(lib"read.ss""wxme")WXME0109 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 7.8 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 33 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(0
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(1
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(2
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(3
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 55
#"((lib \"snip.rkt\" \"pict\") (lib \"snip-wxme.rkt\" \"pict\"))\0"
1 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 60 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 8 #"SF Mono\0"
0 15 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 192 46 214 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 57 89 216 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 102 191 255 0 0 0 -1
-1 2 37 #"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 102 191 255 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 44 111 255 0 0 0 -1
-1 2 38 #"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 44 111 255 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 249 148 40 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 249 148 40 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 140 212 140 0 0 0 -1 -1 2
37 #"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 140 212 140 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 51 174 51 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 51 174 51 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 140 212 140 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 196 69 43 0 0 0 -1
-1 2 42 #"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 196 69 43 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
36 #"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
16 #"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 163 255 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 163 255 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
28 #"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
37 #"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
36 #"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 166 0 255 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 166 0 255 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 205 50 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 205 50 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 240 230 140 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 240 230 140 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
38 #"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 0 36
#"mrlib/syntax-browser:subtitle-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 100 149 237 0 0 0 -1 -1 0
42 #"mrlib/syntax-browser:focused-syntax-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 50 205 50 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 191 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 191 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 152 251 152 0 0 0
-1 -1           0 1201 0 27 3 1 #" "
0 0 31 3 10 #"#lang eopl"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 7 #"require"
0 0 27 3 1 #" "
0 0 20 3 22 #"\"../define-record.rkt\""
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 7 #"require"
0 0 27 3 1 #" "
0 0 20 3 22 #"\"../string-parser.rkt\""
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 7 #"require"
0 0 27 3 1 #" "
0 0 14 3 17 #"readline/readline"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 7 #"require"
0 0 27 3 1 #" "
0 0 20 3 13 #"\"../util.rkt\""
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 7 #"require"
0 0 27 3 1 #" "
0 0 20 3 13 #"\"../cell.rkt\""
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 13 #"define-record"
0 0 27 3 1 #" "
0 0 14 3 3 #"lit"
0 0 27 3 2 #" ("
0 0 14 3 5 #"datum"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 13 #"define-record"
0 0 27 3 1 #" "
0 0 14 3 6 #"varref"
0 0 27 3 2 #" ("
0 0 14 3 3 #"var"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 13 #"define-record"
0 0 27 3 1 #" "
0 0 16 3 6 #"lambda"
0 0 27 3 2 #" ("
0 0 14 3 6 #"formal"
0 0 27 3 1 #" "
0 0 14 3 4 #"body"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 13 #"define-record"
0 0 27 3 1 #" "
0 0 14 3 3 #"app"
0 0 27 3 2 #" ("
0 0 14 3 5 #"rator"
0 0 27 3 1 #" "
0 0 14 3 4 #"rand"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 13 #"define-record"
0 0 27 3 1 #" "
0 0 14 3 2 #"if"
0 0 27 3 2 #" ("
0 0 14 3 8 #"test-exp"
0 0 27 3 1 #" "
0 0 14 3 8 #"then-exp"
0 0 27 3 1 #" "
0 0 14 3 8 #"else-exp"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 13 #"define-record"
0 0 27 3 1 #" "
0 0 16 3 3 #"let"
0 0 27 3 2 #" ("
0 0 14 3 5 #"decls"
0 0 27 3 1 #" "
0 0 14 3 4 #"body"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 13 #"define-record"
0 0 27 3 1 #" "
0 0 14 3 10 #"letmutable"
0 0 27 3 2 #" ("
0 0 14 3 5 #"decls"
0 0 27 3 1 #" "
0 0 14 3 4 #"body"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 13 #"define-record"
0 0 27 3 1 #" "
0 0 14 3 4 #"decl"
0 0 27 3 2 #" ("
0 0 14 3 3 #"var"
0 0 27 3 1 #" "
0 0 14 3 3 #"exp"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 13 #"define-record"
0 0 27 3 1 #" "
0 0 14 3 4 #"proc"
0 0 27 3 2 #" ("
0 0 14 3 7 #"formals"
0 0 27 3 1 #" "
0 0 14 3 4 #"body"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 13 #"define-record"
0 0 27 3 1 #" "
0 0 14 3 7 #"closure"
0 0 27 3 2 #" ("
0 0 14 3 7 #"formals"
0 0 27 3 1 #" "
0 0 14 3 4 #"body"
0 0 27 3 1 #" "
0 0 14 3 3 #"env"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 13 #"define-record"
0 0 27 3 1 #" "
0 0 14 3 9 #"varassign"
0 0 27 3 2 #" ("
0 0 14 3 3 #"var"
0 0 27 3 1 #" "
0 0 14 3 4 #"expr"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 13 #"define-record"
0 0 27 3 1 #" "
0 0 16 3 5 #"begin"
0 0 27 3 2 #" ("
0 0 14 3 4 #"exp1"
0 0 27 3 1 #" "
0 0 14 3 4 #"exp2"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 13 #"define-record"
0 0 27 3 1 #" "
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 3 #"var"
0 0 27 3 1 #" "
0 0 14 3 4 #"expr"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 11 #"true-value?"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 27 3 2 #" ("
0 0 14 3 1 #"x"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 5 #"    ("
0 0 14 3 3 #"not"
0 0 27 3 2 #" ("
0 0 14 3 5 #"zero?"
0 0 27 3 1 #" "
0 0 14 3 1 #"x"
0 0 27 3 4 #"))))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 8 #"eval-exp"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 27 3 2 #" ("
0 0 14 3 3 #"exp"
0 0 27 3 1 #" "
0 0 14 3 3 #"env"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 4 #"    "
0 0 18 3 24 #";(displayln \"---------\")"
0 0 27 29 1 #"\n"
0 0 27 3 4 #"    "
0 0 18 3 39 #"; (displayln \"eval-exp: \" exp \"; \" env)"
0 0 27 29 1 #"\n"
0 0 27 3 4 #"    "
0 0 18 3 24 #";(displayln \"---------\")"
0 0 27 29 1 #"\n"
0 0 27 3 5 #"    ("
0 0 14 3 12 #"variant-case"
0 0 27 3 1 #" "
0 0 14 3 3 #"exp"
0 0 27 29 1 #"\n"
0 0 27 3 7 #"      ("
0 0 14 3 3 #"lit"
0 0 27 3 2 #" ("
0 0 14 3 5 #"datum"
0 0 27 3 2 #") "
0 0 14 3 5 #"datum"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 7 #"      ("
0 0 14 3 6 #"varref"
0 0 27 3 2 #" ("
0 0 14 3 3 #"var"
0 0 27 3 3 #") ("
0 0 16 3 5 #"begin"
0 0 27 29 1 #"\n"
0 0 27 3 22 #"                      "
0 0 18 3 24 #";(displayln \"var: \" var)"
0 0 27 29 1 #"\n"
0 0 27 3 23 #"                      ("
0 0 14 3 8 #"cell-ref"
0 0 27 3 2 #" ("
0 0 14 3 9 #"apply-env"
0 0 27 3 1 #" "
0 0 14 3 3 #"env"
0 0 27 3 1 #" "
0 0 14 3 3 #"var"
0 0 27 3 4 #"))))"
0 0 27 29 1 #"\n"
0 0 27 3 7 #"      ("
0 0 14 3 2 #"if"
0 0 27 3 2 #" ("
0 0 14 3 8 #"test-exp"
0 0 27 3 1 #" "
0 0 14 3 8 #"then-exp"
0 0 27 3 1 #" "
0 0 14 3 8 #"else-exp"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 11 #"          ("
0 0 14 3 2 #"if"
0 0 27 3 2 #" ("
0 0 14 3 11 #"true-value?"
0 0 27 3 2 #" ("
0 0 14 3 8 #"eval-exp"
0 0 27 3 1 #" "
0 0 14 3 8 #"test-exp"
0 0 27 3 1 #" "
0 0 14 3 3 #"env"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 15 #"              ("
0 0 14 3 8 #"eval-exp"
0 0 27 3 1 #" "
0 0 14 3 8 #"then-exp"
0 0 27 3 1 #" "
0 0 14 3 3 #"env"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 15 #"              ("
0 0 14 3 8 #"eval-exp"
0 0 27 3 1 #" "
0 0 14 3 8 #"else-exp"
0 0 27 3 1 #" "
0 0 14 3 3 #"env"
0 0 27 3 3 #")))"
0 0 27 29 1 #"\n"
0 0 27 3 7 #"      ("
0 0 14 3 3 #"app"
0 0 27 3 2 #" ("
0 0 14 3 5 #"rator"
0 0 27 3 1 #" "
0 0 14 3 5 #"rands"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 16 #"               ("
0 0 16 3 3 #"let"
0 0 27 3 3 #" (("
0 0 14 3 4 #"proc"
0 0 27 3 2 #" ("
0 0 14 3 8 #"eval-exp"
0 0 27 3 1 #" "
0 0 14 3 5 #"rator"
0 0 27 3 1 #" "
0 0 14 3 3 #"env"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 22 #"                     ("
0 0 14 3 4 #"args"
0 0 27 3 2 #" ("
0 0 14 3 10 #"eval-rands"
0 0 27 3 1 #" "
0 0 14 3 5 #"rands"
0 0 27 3 1 #" "
0 0 14 3 3 #"env"
0 0 27 3 3 #")))"
0 0 27 29 1 #"\n"
0 0 27 3 18 #"                 ("
0 0 14 3 10 #"apply-proc"
0 0 27 3 1 #" "
0 0 14 3 4 #"proc"
0 0 27 3 1 #" "
0 0 14 3 4 #"args"
0 0 27 3 3 #")))"
0 0 27 29 1 #"\n"
0 0 27 3 7 #"      ("
0 0 14 3 10 #"letmutable"
0 0 27 3 2 #" ("
0 0 14 3 5 #"decls"
0 0 27 3 1 #" "
0 0 14 3 4 #"body"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 9 #"        ("
0 0 16 3 3 #"let"
0 0 27 3 3 #" (("
0 0 14 3 4 #"vars"
0 0 27 3 2 #" ("
0 0 14 3 3 #"map"
0 0 27 3 1 #" "
0 0 14 3 9 #"decl->var"
0 0 27 3 1 #" "
0 0 14 3 5 #"decls"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 15 #"              ("
0 0 14 3 4 #"exps"
0 0 27 3 2 #" ("
0 0 14 3 3 #"map"
0 0 27 3 1 #" "
0 0 14 3 9 #"decl->exp"
0 0 27 3 1 #" "
0 0 14 3 5 #"decls"
0 0 27 3 3 #")))"
0 0 27 29 1 #"\n"
0 0 27 3 11 #"          ("
0 0 16 3 3 #"let"
0 0 27 3 3 #" (("
0 0 14 3 7 #"new-env"
0 0 27 3 2 #" ("
0 0 14 3 10 #"extend-env"
0 0 27 3 1 #" "
0 0 14 3 4 #"vars"
0 0 27 29 1 #"\n"
0 0 27 3 38 #"                                     ("
0 0 14 3 10 #"eval-rands"
0 0 27 3 1 #" "
0 0 14 3 4 #"exps"
0 0 27 3 1 #" "
0 0 14 3 3 #"env"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 37 #"                                     "
0 0 14 3 3 #"env"
0 0 27 3 3 #")))"
0 0 27 29 1 #"\n"
0 0 27 3 13 #"            ("
0 0 14 3 8 #"eval-exp"
0 0 27 3 1 #" "
0 0 14 3 4 #"body"
0 0 27 3 1 #" "
0 0 14 3 7 #"new-env"
0 0 27 3 4 #"))))"
0 0 27 29 1 #"\n"
0 0 27 3 7 #"      ("
0 0 16 3 3 #"let"
0 0 27 3 2 #" ("
0 0 14 3 5 #"decls"
0 0 27 3 1 #" "
0 0 14 3 4 #"body"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 9 #"        ("
0 0 16 3 3 #"let"
0 0 27 3 3 #" (("
0 0 14 3 4 #"vars"
0 0 27 3 2 #" ("
0 0 14 3 3 #"map"
0 0 27 3 1 #" "
0 0 14 3 9 #"decl->var"
0 0 27 3 1 #" "
0 0 14 3 5 #"decls"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 15 #"              ("
0 0 14 3 4 #"exps"
0 0 27 3 2 #" ("
0 0 14 3 3 #"map"
0 0 27 3 1 #" "
0 0 14 3 9 #"decl->exp"
0 0 27 3 1 #" "
0 0 14 3 5 #"decls"
0 0 27 3 3 #")))"
0 0 27 29 1 #"\n"
0 0 27 3 11 #"          ("
0 0 16 3 3 #"let"
0 0 27 3 3 #" (("
0 0 14 3 7 #"new-env"
0 0 27 3 2 #" ("
0 0 14 3 10 #"extend-env"
0 0 27 3 1 #" "
0 0 14 3 4 #"vars"
0 0 27 29 1 #"\n"
0 0 27 3 38 #"                                     ("
0 0 14 3 10 #"eval-rands"
0 0 27 3 1 #" "
0 0 14 3 4 #"exps"
0 0 27 3 1 #" "
0 0 14 3 3 #"env"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 37 #"                                     "
0 0 14 3 3 #"env"
0 0 27 3 3 #")))"
0 0 27 29 1 #"\n"
0 0 27 3 13 #"            ("
0 0 14 3 8 #"eval-exp"
0 0 27 3 1 #" "
0 0 14 3 4 #"body"
0 0 27 3 1 #" "
0 0 14 3 7 #"new-env"
0 0 27 3 4 #"))))"
0 0 27 29 1 #"\n"
0 0 27 3 7 #"      ("
0 0 14 3 9 #"varassign"
0 0 27 3 2 #" ("
0 0 14 3 3 #"var"
0 0 27 3 1 #" "
0 0 14 3 3 #"exp"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 18 #"                 ("
0 0 14 3 9 #"cell-set!"
0 0 27 3 2 #" ("
0 0 14 3 9 #"apply-env"
0 0 27 3 1 #" "
0 0 14 3 3 #"env"
0 0 27 3 1 #" "
0 0 14 3 3 #"var"
0 0 27 3 3 #") ("
0 0 14 3 8 #"eval-exp"
0 0 27 3 1 #" "
0 0 14 3 3 #"exp"
0 0 27 3 1 #" "
0 0 14 3 3 #"env"
0 0 27 3 3 #")))"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"      "
0 0 18 3 16 #"; Exercise 5.5.5"
0 0 27 29 1 #"\n"
0 0 27 3 7 #"      ("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 3 #"var"
0 0 27 3 1 #" "
0 0 14 3 3 #"exp"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 9 #"        ("
0 0 14 3 2 #"if"
0 0 27 3 2 #" ("
0 0 14 3 11 #"exists-env?"
0 0 27 3 1 #" "
0 0 14 3 3 #"env"
0 0 27 3 1 #" "
0 0 14 3 3 #"var"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 13 #"            ("
0 0 14 3 9 #"cell-set!"
0 0 27 3 2 #" ("
0 0 14 3 9 #"apply-env"
0 0 27 3 1 #" "
0 0 14 3 3 #"env"
0 0 27 3 1 #" "
0 0 14 3 3 #"var"
0 0 27 3 3 #") ("
0 0 14 3 8 #"eval-exp"
0 0 27 3 1 #" "
0 0 14 3 3 #"exp"
0 0 27 3 1 #" "
0 0 14 3 3 #"env"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 13 #"            ("
0 0 14 3 10 #"extend-env"
0 0 27 3 2 #" ("
0 0 14 3 4 #"list"
0 0 27 3 1 #" "
0 0 14 3 3 #"var"
0 0 27 3 3 #") ("
0 0 14 3 4 #"list"
0 0 27 3 2 #" ("
0 0 14 3 9 #"make-cell"
0 0 27 3 2 #" ("
0 0 14 3 8 #"eval-exp"
0 0 27 3 1 #" "
0 0 14 3 3 #"exp"
0 0 27 3 1 #" "
0 0 14 3 3 #"env"
0 0 27 3 4 #"))) "
0 0 14 3 3 #"env"
0 0 27 3 3 #")))"
0 0 27 29 1 #"\n"
0 0 27 3 7 #"      ("
0 0 14 3 4 #"proc"
0 0 27 3 2 #" ("
0 0 14 3 7 #"formals"
0 0 27 3 1 #" "
0 0 14 3 4 #"body"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 13 #"            ("
0 0 14 3 12 #"make-closure"
0 0 27 3 1 #" "
0 0 14 3 7 #"formals"
0 0 27 3 1 #" "
0 0 14 3 4 #"body"
0 0 27 3 1 #" "
0 0 14 3 3 #"env"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 7 #"      ("
0 0 16 3 5 #"begin"
0 0 27 3 2 #" ("
0 0 14 3 4 #"exp1"
0 0 27 3 1 #" "
0 0 14 3 4 #"exp2"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 14 #"             ("
0 0 14 3 8 #"eval-exp"
0 0 27 3 1 #" "
0 0 14 3 4 #"exp1"
0 0 27 3 1 #" "
0 0 14 3 3 #"env"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 14 #"             ("
0 0 14 3 8 #"eval-exp"
0 0 27 3 1 #" "
0 0 14 3 4 #"exp2"
0 0 27 3 1 #" "
0 0 14 3 3 #"env"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 27 3 2 #" ("
0 0 14 3 10 #"eopl:error"
0 0 27 3 1 #" "
0 0 20 3 15 #"\"Invalid AST: \""
0 0 27 3 1 #" "
0 0 14 3 3 #"exp"
0 0 27 3 5 #")))))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 18 #"denoted->expressed"
0 0 27 3 1 #" "
0 0 14 3 8 #"cell-ref"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 10 #"eval-rands"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 27 3 2 #" ("
0 0 14 3 5 #"rands"
0 0 27 3 1 #" "
0 0 14 3 3 #"env"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 4 #"    "
0 0 18 3 68
(4
 #";(displayln \"-----eval-rands: rands: \" rands \"; env: \" env \" --"
 #"---\")"
) 0 0 27 29 1 #"\n"
0 0 27 3 5 #"    ("
0 0 14 3 3 #"map"
0 0 27 3 2 #" ("
0 0 16 3 6 #"lambda"
0 0 27 3 2 #" ("
0 0 14 3 4 #"rand"
0 0 27 3 3 #") ("
0 0 14 3 9 #"make-cell"
0 0 27 3 2 #" ("
0 0 14 3 8 #"eval-exp"
0 0 27 3 1 #" "
0 0 14 3 4 #"rand"
0 0 27 3 1 #" "
0 0 14 3 3 #"env"
0 0 27 3 4 #"))) "
0 0 14 3 5 #"rands"
0 0 27 3 3 #")))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 13 #"define-record"
0 0 27 3 1 #" "
0 0 14 3 9 #"prim-proc"
0 0 27 3 2 #" ("
0 0 14 3 7 #"prim-op"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 10 #"apply-proc"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 27 3 2 #" ("
0 0 14 3 4 #"proc"
0 0 27 3 1 #" "
0 0 14 3 4 #"args"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 4 #"    "
0 0 18 3 34 #";(displayln \"invoking apply-proc\")"
0 0 27 29 1 #"\n"
0 0 27 3 5 #"    ("
0 0 14 3 12 #"variant-case"
0 0 27 3 1 #" "
0 0 14 3 4 #"proc"
0 0 27 29 1 #"\n"
0 0 27 3 7 #"      ("
0 0 14 3 9 #"prim-proc"
0 0 27 3 2 #" ("
0 0 14 3 7 #"prim-op"
0 0 27 3 3 #") ("
0 0 16 3 5 #"begin"
0 0 27 29 1 #"\n"
0 0 27 3 29 #"                             "
0 0 18 3 30 #";(displayln prim-op \"->\" args)"
0 0 27 29 1 #"\n"
0 0 27 3 30 #"                             ("
0 0 14 3 13 #"apply-prim-op"
0 0 27 3 1 #" "
0 0 14 3 7 #"prim-op"
0 0 27 3 2 #" ("
0 0 14 3 3 #"map"
0 0 27 3 1 #" "
0 0 14 3 18 #"denoted->expressed"
0 0 27 3 1 #" "
0 0 14 3 4 #"args"
0 0 27 3 4 #"))))"
0 0 27 29 1 #"\n"
0 0 27 3 7 #"      ("
0 0 14 3 7 #"closure"
0 0 27 3 2 #" ("
0 0 14 3 7 #"formals"
0 0 27 3 1 #" "
0 0 14 3 4 #"body"
0 0 27 3 1 #" "
0 0 14 3 3 #"env"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 16 #"               ("
0 0 14 3 8 #"eval-exp"
0 0 27 3 1 #" "
0 0 14 3 4 #"body"
0 0 27 3 2 #" ("
0 0 14 3 10 #"extend-env"
0 0 27 3 1 #" "
0 0 14 3 7 #"formals"
0 0 27 3 1 #" "
0 0 14 3 4 #"args"
0 0 27 3 1 #" "
0 0 14 3 3 #"env"
0 0 27 3 3 #")))"
0 0 27 29 1 #"\n"
0 0 27 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 27 3 2 #" ("
0 0 14 3 10 #"eopl:error"
0 0 27 3 1 #" "
0 0 20 3 21 #"\"Invalid procedure: \""
0 0 27 3 1 #" "
0 0 14 3 4 #"proc"
0 0 27 3 5 #")))))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 6 #"ft->01"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 27 3 2 #" ("
0 0 14 3 1 #"x"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 27 3 1 #" "
0 0 14 3 1 #"x"
0 0 27 29 1 #"\n"
0 0 27 3 8 #"        "
0 0 23 3 1 #"1"
0 0 27 29 1 #"\n"
0 0 27 3 8 #"        "
0 0 23 3 1 #"0"
0 0 27 3 11 #")))        "
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 13 #"apply-prim-op"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 27 3 2 #" ("
0 0 14 3 7 #"prim-op"
0 0 27 3 1 #" "
0 0 14 3 4 #"args"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 4 #"    "
0 0 18 3 37 #";(displayln \"prim-op: \" prim-op args)"
0 0 27 29 1 #"\n"
0 0 27 3 5 #"    ("
0 0 16 3 4 #"case"
0 0 27 3 1 #" "
0 0 14 3 7 #"prim-op"
0 0 27 29 1 #"\n"
0 0 27 3 8 #"      (("
0 0 14 3 1 #"+"
0 0 27 3 3 #") ("
0 0 14 3 1 #"+"
0 0 27 3 2 #" ("
0 0 14 3 3 #"car"
0 0 27 3 1 #" "
0 0 14 3 4 #"args"
0 0 27 3 3 #") ("
0 0 14 3 4 #"cadr"
0 0 27 3 1 #" "
0 0 14 3 4 #"args"
0 0 27 3 3 #")))"
0 0 27 29 1 #"\n"
0 0 27 3 8 #"      (("
0 0 14 3 1 #"-"
0 0 27 3 3 #") ("
0 0 14 3 1 #"-"
0 0 27 3 2 #" ("
0 0 14 3 3 #"car"
0 0 27 3 1 #" "
0 0 14 3 4 #"args"
0 0 27 3 3 #") ("
0 0 14 3 4 #"cadr"
0 0 27 3 1 #" "
0 0 14 3 4 #"args"
0 0 27 3 3 #")))"
0 0 27 29 1 #"\n"
0 0 27 3 8 #"      (("
0 0 14 3 1 #"*"
0 0 27 3 3 #") ("
0 0 14 3 1 #"*"
0 0 27 3 2 #" ("
0 0 14 3 3 #"car"
0 0 27 3 1 #" "
0 0 14 3 4 #"args"
0 0 27 3 3 #") ("
0 0 14 3 4 #"cadr"
0 0 27 3 1 #" "
0 0 14 3 4 #"args"
0 0 27 3 3 #")))"
0 0 27 29 1 #"\n"
0 0 27 3 8 #"      (("
0 0 14 3 4 #"add1"
0 0 27 3 3 #") ("
0 0 14 3 1 #"+"
0 0 27 3 2 #" ("
0 0 14 3 3 #"car"
0 0 27 3 1 #" "
0 0 14 3 4 #"args"
0 0 27 3 2 #") "
0 0 23 3 1 #"1"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 8 #"      (("
0 0 14 3 4 #"sub1"
0 0 27 3 3 #") ("
0 0 14 3 1 #"-"
0 0 27 3 2 #" ("
0 0 14 3 3 #"car"
0 0 27 3 1 #" "
0 0 14 3 4 #"args"
0 0 27 3 2 #") "
0 0 23 3 1 #"1"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 8 #"      (("
0 0 14 3 5 #"minus"
0 0 27 3 3 #") ("
0 0 14 3 1 #"-"
0 0 27 3 1 #" "
0 0 23 3 1 #"0"
0 0 27 3 2 #" ("
0 0 14 3 3 #"car"
0 0 27 3 1 #" "
0 0 14 3 4 #"args"
0 0 27 3 4 #"))) "
0 0 18 3 16 #"; Exercise 5.1.3"
0 0 27 29 1 #"\n"
0 0 27 3 8 #"      (("
0 0 14 3 4 #"list"
0 0 27 3 2 #") "
0 0 14 3 4 #"args"
0 0 27 3 2 #") "
0 0 18 3 16 #"; Exercise 5.1.4"
0 0 27 29 1 #"\n"
0 0 27 3 8 #"      (("
0 0 14 3 3 #"car"
0 0 27 3 3 #") ("
0 0 14 3 4 #"caar"
0 0 27 3 1 #" "
0 0 14 3 4 #"args"
0 0 27 3 3 #")) "
0 0 18 3 16 #"; Exercise 5.1.4"
0 0 27 29 1 #"\n"
0 0 27 3 8 #"      (("
0 0 14 3 3 #"cdr"
0 0 27 3 3 #") ("
0 0 14 3 4 #"cdar"
0 0 27 3 1 #" "
0 0 14 3 4 #"args"
0 0 27 3 3 #")) "
0 0 18 3 16 #"; exercise 5.1.4"
0 0 27 29 1 #"\n"
0 0 27 3 8 #"      (("
0 0 14 3 4 #"null"
0 0 27 3 3 #") ("
0 0 14 3 6 #"ft->01"
0 0 27 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 27 3 2 #" ("
0 0 14 3 3 #"car"
0 0 27 3 1 #" "
0 0 14 3 4 #"args"
0 0 27 3 5 #")))) "
0 0 18 3 16 #"; Exercise 5.2.3"
0 0 27 29 1 #"\n"
0 0 27 3 8 #"      (("
0 0 14 3 4 #"cons"
0 0 27 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 27 3 2 #" ("
0 0 14 3 3 #"car"
0 0 27 3 1 #" "
0 0 14 3 4 #"args"
0 0 27 3 3 #") ("
0 0 14 3 4 #"cadr"
0 0 27 3 1 #" "
0 0 14 3 4 #"args"
0 0 27 3 4 #"))) "
0 0 18 3 16 #"; Exercise 5.1.4"
0 0 27 29 1 #"\n"
0 0 27 3 8 #"      (("
0 0 14 3 2 #"eq"
0 0 27 3 3 #") ("
0 0 14 3 3 #"eq?"
0 0 27 3 2 #" ("
0 0 14 3 3 #"car"
0 0 27 3 1 #" "
0 0 14 3 4 #"args"
0 0 27 3 3 #") ("
0 0 14 3 4 #"cadr"
0 0 27 3 1 #" "
0 0 14 3 4 #"args"
0 0 27 3 4 #"))) "
0 0 18 3 16 #"; Exercise 5.3.2"
0 0 27 29 1 #"\n"
0 0 27 3 8 #"      (("
0 0 14 3 5 #"equal"
0 0 27 3 3 #") ("
0 0 14 3 6 #"ft->01"
0 0 27 3 2 #" ("
0 0 14 3 1 #"="
0 0 27 3 2 #" ("
0 0 14 3 3 #"car"
0 0 27 3 1 #" "
0 0 14 3 4 #"args"
0 0 27 3 3 #") ("
0 0 14 3 4 #"cadr"
0 0 27 3 1 #" "
0 0 14 3 4 #"args"
0 0 27 3 5 #")))) "
0 0 18 3 16 #"; Exercise 5.2.2"
0 0 27 29 1 #"\n"
0 0 27 3 8 #"      (("
0 0 14 3 7 #"greater"
0 0 27 3 3 #") ("
0 0 14 3 6 #"ft->01"
0 0 27 3 2 #" ("
0 0 14 3 1 #">"
0 0 27 3 2 #" ("
0 0 14 3 3 #"car"
0 0 27 3 1 #" "
0 0 14 3 4 #"args"
0 0 27 3 3 #") ("
0 0 14 3 4 #"cadr"
0 0 27 3 1 #" "
0 0 14 3 4 #"args"
0 0 27 3 5 #")))) "
0 0 18 3 16 #"; Exercise 5.2.2"
0 0 27 29 1 #"\n"
0 0 27 3 8 #"      (("
0 0 14 3 4 #"less"
0 0 27 3 3 #") ("
0 0 14 3 6 #"ft->01"
0 0 27 3 2 #" ("
0 0 14 3 1 #"<"
0 0 27 3 2 #" ("
0 0 14 3 3 #"car"
0 0 27 3 1 #" "
0 0 14 3 4 #"args"
0 0 27 3 3 #") ("
0 0 14 3 4 #"cadr"
0 0 27 3 1 #" "
0 0 14 3 4 #"args"
0 0 27 3 5 #")))) "
0 0 18 3 16 #"; Exercise 5.2.2"
0 0 27 29 1 #"\n"
0 0 27 3 8 #"      (("
0 0 14 3 4 #"zero"
0 0 27 3 3 #") ("
0 0 14 3 6 #"ft->01"
0 0 27 3 2 #" ("
0 0 14 3 1 #"="
0 0 27 3 2 #" ("
0 0 14 3 3 #"car"
0 0 27 3 1 #" "
0 0 14 3 4 #"args"
0 0 27 3 2 #") "
0 0 23 3 1 #"0"
0 0 27 3 4 #"))) "
0 0 18 3 16 #"; Exercise 5.2.2"
0 0 27 29 1 #"\n"
0 0 27 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 27 3 2 #" ("
0 0 14 3 10 #"eopl:error"
0 0 27 3 1 #" "
0 0 20 3 25 #"\"Invalid  prim-op name: \""
0 0 27 3 1 #" "
0 0 14 3 7 #"prim-op"
0 0 27 3 5 #")))))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 13 #"prim-op-names"
0 0 27 3 1 #" "
0 0 23 3 1 #"'"
0 0 27 3 1 #"("
0 0 14 3 1 #"+"
0 0 27 3 1 #" "
0 0 14 3 1 #"-"
0 0 27 3 1 #" "
0 0 14 3 1 #"*"
0 0 27 3 1 #" "
0 0 14 3 4 #"add1"
0 0 27 3 1 #" "
0 0 14 3 4 #"sub1"
0 0 27 3 1 #" "
0 0 14 3 5 #"minus"
0 0 27 3 1 #" "
0 0 14 3 4 #"list"
0 0 27 3 1 #" "
0 0 14 3 3 #"car"
0 0 27 3 1 #" "
0 0 14 3 3 #"cdr"
0 0 27 3 1 #" "
0 0 14 3 4 #"cons"
0 0 27 3 1 #" "
0 0 14 3 5 #"equal"
0 0 27 3 1 #" "
0 0 14 3 7 #"greater"
0 0 27 3 1 #" "
0 0 14 3 4 #"less"
0 0 27 3 1 #" "
0 0 14 3 4 #"zero"
0 0 27 3 1 #" "
0 0 14 3 4 #"null"
0 0 27 3 1 #" "
0 0 14 3 2 #"eq"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 8 #"init-env"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 14 3 10 #"extend-env"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"   "
0 0 14 3 13 #"prim-op-names"
0 0 27 29 1 #"\n"
0 0 27 3 4 #"   ("
0 0 14 3 3 #"map"
0 0 27 3 1 #" "
0 0 14 3 9 #"make-cell"
0 0 27 3 2 #" ("
0 0 14 3 3 #"map"
0 0 27 3 1 #" "
0 0 14 3 14 #"make-prim-proc"
0 0 27 3 1 #" "
0 0 14 3 13 #"prim-op-names"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 4 #"   ("
0 0 14 3 9 #"extend-ff"
0 0 27 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 9 #"emptylist"
0 0 27 3 1 #" "
0 0 23 3 1 #"'"
0 0 27 3 3 #"() "
0 0 14 3 13 #"the-empty-env"
0 0 27 3 3 #")))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 3 #"run"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 27 3 2 #" ("
0 0 14 3 1 #"x"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 5 #"    ("
0 0 14 3 8 #"eval-exp"
0 0 27 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 27 3 1 #" "
0 0 14 3 1 #"x"
0 0 27 3 4 #"))))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 5 #"parse"
0 0 27 3 1 #" "
0 0 14 3 23 #"character-string-parser"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 14 3 5 #"write"
0 0 27 3 2 #" ("
0 0 14 3 8 #"eval-exp"
0 0 27 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 27 3 1 #" "
0 0 20 3 10 #"\"let x = 3"
0 0 20 29 1 #"\n"
0 0 20 3 8 #"in begin"
0 0 20 29 1 #"\n"
0 0 20 3 17 #"    x := add1(x);"
0 0 20 29 1 #"\n"
0 0 20 3 12 #"    x := +(x"
0 0 20 3 5 #", x);"
0 0 20 29 1 #"\n"
0 0 20 3 11 #"    +(x, 2)"
0 0 20 29 1 #"\n"
0 0 20 3 6 #"  end\""
0 0 27 3 2 #") "
0 0 14 3 8 #"init-env"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 4 #"; 10"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 92
(5
 #"; lang eopl doesnt support standard scheme read-line. So using a dif"
 #"ferent package readline."
) 0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 11 #"repl-helper"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 27 3 2 #" ("
0 0 14 3 3 #"env"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 5 #"    ("
0 0 16 3 3 #"let"
0 0 27 3 3 #" (("
0 0 14 3 7 #"new-env"
0 0 27 3 2 #" ("
0 0 14 3 8 #"eval-exp"
0 0 27 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 27 3 2 #" ("
0 0 14 3 8 #"readline"
0 0 27 3 1 #" "
0 0 20 3 5 #"\"-->\""
0 0 27 3 3 #")) "
0 0 14 3 3 #"env"
0 0 27 3 3 #")))"
0 0 27 29 1 #"\n"
0 0 27 3 7 #"      ("
0 0 14 3 2 #"if"
0 0 27 3 2 #" ("
0 0 14 3 3 #"ff?"
0 0 27 3 1 #" "
0 0 14 3 7 #"new-env"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 11 #"          ("
0 0 16 3 5 #"begin"
0 0 27 29 1 #"\n"
0 0 27 3 12 #"            "
0 0 18 3 12 #";(display x)"
0 0 27 29 1 #"\n"
0 0 27 3 12 #"            "
0 0 18 3 10 #";(newline)"
0 0 27 29 1 #"\n"
0 0 27 3 13 #"            ("
0 0 14 3 11 #"repl-helper"
0 0 27 3 1 #" "
0 0 14 3 7 #"new-env"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 11 #"          ("
0 0 16 3 5 #"begin"
0 0 27 29 1 #"\n"
0 0 27 3 13 #"            ("
0 0 14 3 5 #"write"
0 0 27 3 1 #" "
0 0 14 3 7 #"new-env"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 13 #"            ("
0 0 14 3 7 #"newline"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 13 #"            ("
0 0 14 3 11 #"repl-helper"
0 0 27 3 1 #" "
0 0 14 3 3 #"env"
0 0 27 3 6 #"))))))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 4 #"repl"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 27 3 3 #" ()"
0 0 27 29 1 #"\n"
0 0 27 3 5 #"    ("
0 0 14 3 11 #"repl-helper"
0 0 27 3 1 #" "
0 0 14 3 8 #"init-env"
0 0 27 3 3 #")))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 9 #";> (repl)"
0 0 27 29 1 #"\n"
0 0 18 3 13 #";define x = 3"
0 0 27 29 1 #"\n"
0 0 18 3 8 #";+(x, 1)"
0 0 27 29 1 #"\n"
0 0 18 3 2 #";4"
0 0 27 29 1 #"\n"
0 0 18 3 18 #";define y = +(x,3)"
0 0 27 29 1 #"\n"
0 0 18 3 2 #";y"
0 0 27 29 1 #"\n"
0 0 18 3 2 #";6"
0 0 27 29 1 #"\n"
0           0
